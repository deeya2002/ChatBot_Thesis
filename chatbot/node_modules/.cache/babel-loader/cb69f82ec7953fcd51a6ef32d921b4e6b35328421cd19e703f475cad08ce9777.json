{"ast":null,"code":"var _jsxFileName = \"D:\\\\thesis\\\\ChatbotforStudent\\\\chatbot\\\\src\\\\server.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { makeRequest } from './apis/Api';\nimport './App.css';\nimport ChatMessage from './components/ChatMessage/ChatMessage';\nimport SideMenu from './';\nimport './css/reset.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Server() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([{\n    user: \"gpt\",\n    message: \"Question?\"\n  }]);\n  async function handleSubmit(e) {\n    var _localStorage;\n    e.preventDefault();\n    const user_id = (_localStorage = localStorage) === null || _localStorage === void 0 ? void 0 : _localStorage.getItem(\"user_id\");\n    let response = await makeRequest({\n      prompt: input,\n      user_id: user_id\n    });\n    response = response.data.split('\\n').map((line, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: line\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 67\n    }, this));\n    setChatLog([...chatLog, {\n      user: 'me',\n      message: `${input}`\n    }, {\n      user: 'gpt',\n      message: response\n    }]);\n    setInput(\"\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SideMenu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"chat-input-textarea\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(Server, \"PAahPz1nXYPIut0dPEfZnfhOA80=\");\n_c = Server;\nexport default Server;\nvar _c;\n$RefreshReg$(_c, \"Server\");","map":{"version":3,"names":["React","useState","makeRequest","ChatMessage","SideMenu","jsxDEV","_jsxDEV","Server","_s","input","setInput","chatLog","setChatLog","user","message","handleSubmit","e","_localStorage","preventDefault","user_id","localStorage","getItem","response","prompt","data","split","map","line","index","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["D:/thesis/ChatbotforStudent/chatbot/src/server.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { makeRequest } from './apis/Api';\r\nimport './App.css';\r\nimport ChatMessage from './components/ChatMessage/ChatMessage';\r\nimport SideMenu from './'\r\nimport './css/reset.css';\r\n\r\nfunction Server() {\r\n    const [input, setInput] = useState(\"\");\r\n    const [chatLog, setChatLog] = useState([{\r\n        user: \"gpt\",\r\n        message: \"Question?\"\r\n    }]);\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault();\r\n        const user_id = localStorage?.getItem(\"user_id\")\r\n\r\n        let response = await makeRequest({ prompt: input, user_id: user_id });\r\n        response = response.data.split('\\n').map((line, index) => <p key={index}>{line}</p>);\r\n\r\n        setChatLog([...chatLog, {\r\n            user: 'me',\r\n            message: `${input}`\r\n        }, {\r\n            user: 'gpt',\r\n            message: response\r\n        }]);\r\n        setInput(\"\");\r\n    }\r\n\r\n    return (\r\n\r\n        <div className='App'>\r\n            < SideMenu />\r\n            <section className='chatbox'>\r\n                <div className='chat-log'>\r\n                    {chatLog.map((message, index) => (\r\n                        <ChatMessage key={index} message={message} />\r\n                    ))}\r\n                </div>\r\n                <div className='chat-input-holder'>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <input\r\n                            type='text'\r\n                            className='chat-input-textarea'\r\n                            value={input}\r\n                            onChange={e => setInput(e.target.value)}\r\n                        />\r\n                    </form>\r\n                </div>\r\n            </section>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Server;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}