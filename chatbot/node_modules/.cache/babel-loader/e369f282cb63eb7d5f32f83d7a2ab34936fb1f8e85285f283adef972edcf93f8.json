{"ast":null,"code":"var _jsxFileName = \"D:\\\\thesis\\\\ChatbotforStudent\\\\chatbot\\\\src\\\\components\\\\free-quiz\\\\Play.js\";\nimport classnames from 'classnames';\nimport M from 'materialize-css';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport Loader from '../common/Loader';\nimport { endFreeQuiz, getFreeQuestions } from '../../actions/quizActions';\nimport isEmpty from '../../validation/is-empty';\nimport buttonSound from '../../assets/audio/button-sound.mp3';\nimport correctNotification from '../../assets/audio/correct-answer.mp3';\nimport wrongNotification from '../../assets/audio/wrong-answer.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n    this.handleDisableButton = () => {\n      if (this.state.previousQuestion === undefined || this.state.currentQuestionIndex === 0) {\n        this.setState({\n          previousButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          previousButtonDisabled: false\n        });\n      }\n      if (this.state.nextQuestion === undefined || this.state.currentQuestionIndex + 1 === this.state.numberOfQuestions) {\n        this.setState({\n          nextButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          nextButtonDisabled: false\n        });\n      }\n    };\n    this.handleOptionClick = e => {\n      if (e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n        document.getElementById('correct-audio').play();\n        setTimeout(() => {\n          this.correctAnswer();\n        }, 500);\n      } else {\n        document.getElementById('wrong-audio').play();\n        setTimeout(() => {\n          this.wrongAnswer();\n        }, 500);\n      }\n      if (this.state.numberOfQuestions === 0) {\n        const questionsArray = Object.keys(this.state.questions).map(i => this.state.questions[i]);\n        this.setState({\n          numberOfQuestions: questionsArray.length\n        });\n      }\n    };\n    this.handleNextButtonClick = e => {\n      if (!this.state.nextButtonDisabled) {\n        this.playButtonSound();\n        if (this.state.nextQuestion !== undefined) {\n          this.setState(prevState => ({\n            currentQuestionIndex: prevState.currentQuestionIndex + 1\n          }), () => {\n            this.displayQuestion(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n          });\n        }\n      }\n    };\n    this.handlePreviousButtonClick = e => {\n      if (!this.state.previousButtonDisabled) {\n        this.playButtonSound();\n        if (this.state.previousQuestion !== undefined) {\n          this.setState(prevState => ({\n            currentQuestionIndex: prevState.currentQuestionIndex - 1\n          }), () => {\n            this.displayQuestion(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n          });\n        }\n      }\n    };\n    this.hadleQuitButtonClick = e => {\n      this.playButtonSound();\n      if (window.confirm('Are you sure you want to quit?')) {\n        this.props.navigate('/');\n      }\n    };\n    this.handleLifeline = e => {\n      switch (e.target.id) {\n        case 'fiftyfifty':\n          if (this.state.fiftyFifty > 0 && this.state.usedFiftyFifty === false) {\n            this.handleFiftyFifty();\n            this.setState(prevState => ({\n              fiftyFifty: prevState.fiftyFifty - 1\n            }));\n          }\n          break;\n        default:\n          break;\n      }\n    };\n    this.handleFiftyFifty = () => {\n      const options = document.querySelectorAll('.option');\n      const randomNumbers = [];\n      let indexOfAnswer;\n      options.forEach((option, index) => {\n        if (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n          indexOfAnswer = index;\n        }\n      });\n      let count = 0;\n      do {\n        const randomNumber = Math.round(Math.random() * 3);\n        if (randomNumber !== indexOfAnswer) {\n          if (randomNumbers.length < 2) {\n            if (!randomNumbers.includes(randomNumber) && !randomNumbers.includes(indexOfAnswer)) {\n              randomNumbers.push(randomNumber);\n              count++;\n            } else {\n              while (true) {\n                const newRandomNumber = Math.round(Math.random() * 3);\n                if (!randomNumbers.includes(newRandomNumber) && newRandomNumber !== indexOfAnswer) {\n                  randomNumbers.push(newRandomNumber);\n                  count++;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      } while (count < 2);\n      options.forEach((option, index) => {\n        if (randomNumbers.includes(index)) {\n          option.style.visibility = 'hidden';\n        }\n      });\n      this.setState({\n        usedFiftyFifty: true\n      });\n    };\n    this.handleHints = () => {\n      if (this.state.hints > 0) {\n        let options = Array.from(document.querySelectorAll('.option'));\n        let indexOfAnswer;\n        options.forEach((option, index) => {\n          if (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n            indexOfAnswer = index;\n          }\n        });\n        while (true) {\n          const randomNumber = Math.round(Math.random() * 3);\n          if (randomNumber !== indexOfAnswer && !this.state.previousRandomNumbers.includes(randomNumber)) {\n            options.forEach((option, index) => {\n              if (index === randomNumber) {\n                option.style.visibility = 'hidden';\n                this.setState(prevState => ({\n                  hints: prevState.hints - 1,\n                  previousRandomNumbers: prevState.previousRandomNumbers.concat(randomNumber)\n                }));\n              }\n            });\n            break;\n          }\n          if (this.state.previousRandomNumbers.length >= 3) break;\n        }\n      }\n    };\n    this.showOptions = () => {\n      const options = document.querySelectorAll('.option');\n      options.forEach(option => {\n        option.style.visibility = 'visible';\n      });\n      this.setState({\n        usedFiftyFifty: false\n      });\n    };\n    this.correctAnswer = () => {\n      M.toast({\n        html: 'Correct Answer!',\n        classes: 'toast-valid',\n        displayLength: 1500\n      });\n      this.setState(prevState => ({\n        score: prevState.score + 1,\n        correctAnswers: prevState.correctAnswers + 1,\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\n        numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\n      }), () => {\n        if (this.state.nextQuestion === undefined) {\n          setTimeout(() => {\n            this.endGame();\n          }, 1000);\n        } else {\n          this.displayQuestion(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n        }\n      });\n    };\n    this.wrongAnswer = () => {\n      navigator.vibrate(1000);\n      M.toast({\n        html: 'Wrong Answer!',\n        classes: 'toast-invalid',\n        displayLength: 1500\n      });\n      this.setState(prevState => ({\n        wrongAnswers: prevState.wrongAnswers + 1,\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\n        numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\n      }), () => {\n        if (this.state.nextQuestion === undefined) {\n          setTimeout(() => {\n            this.endGame();\n          }, 1000);\n        } else {\n          this.displayQuestion(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n        }\n      });\n    };\n    this.endGame = () => {\n      const {\n        state\n      } = this;\n      const playerStats = {\n        score: state.score,\n        numberOfQuestions: state.numberOfQuestions,\n        numberOfAnsweredQuestions: state.numberOfAnsweredQuestions,\n        correctAnswers: state.correctAnswers,\n        wrongAnswers: state.wrongAnswers,\n        fiftyFiftyUsed: 2 - state.fiftyFifty,\n        hintsUsed: 10 - state.hints\n      };\n      this.props.endFreeQuiz(playerStats);\n      setTimeout(() => {\n        this.props.navigate('/play/quizSummary');\n      }, 1000);\n    };\n    this.startTimer = () => {\n      const countDownTime = Date.now() + 1800000;\n      this.interval = setInterval(() => {\n        const now = new Date();\n        const distance = countDownTime - now;\n        const minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n        const seconds = Math.floor(distance % (1000 * 60) / 1000);\n        if (distance < 0) {\n          clearInterval(this.interval);\n          this.setState({\n            time: {\n              minutes: 0,\n              seconds: 0\n            }\n          }, () => {\n            this.endGame();\n          });\n        } else {\n          this.setState({\n            time: {\n              minutes,\n              seconds\n            }\n          });\n        }\n      }, 1000);\n    };\n    this.playButtonSound = () => {\n      document.getElementById('button-sound').play();\n    };\n    this.state = {\n      type: '',\n      questions: [],\n      currentQuestion: {},\n      nextQuestion: {},\n      previousQuestion: {},\n      answer: '',\n      numberOfQuestions: 0,\n      numberOfAnsweredQuestions: 0,\n      currentQuestionIndex: 0,\n      score: 0,\n      correctAnswers: 0,\n      wrongAnswers: 0,\n      hints: 10,\n      fiftyFifty: 2,\n      usedFiftyFifty: false,\n      loading: false,\n      previousButtonDisabled: true,\n      nextButtonDisabled: false,\n      previousRandomNumbers: [],\n      time: {}\n    };\n    this.interval = null;\n  }\n  componentDidMount() {\n    this.props.getFreeQuestions();\n    this.setState({\n      loading: true\n    });\n    this.startTimer();\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!isEmpty(nextProps.quiz)) {\n      this.setState({\n        questions: nextProps.quiz.questions,\n        type: nextProps.quiz.type,\n        numberOfQuestions: nextProps.quiz.numberOfQuestions,\n        loading: false\n      }, () => {\n        this.displayQuestion(this.state.questions);\n        this.handleDisableButton();\n      });\n    }\n  }\n  displayQuestion(questions = this.state.questions, currentQuestion, nextQuestion, previousQuestion) {\n    let {\n      currentQuestionIndex\n    } = this.state;\n    if (!isEmpty(this.state.questions)) {\n      questions = this.state.questions;\n      currentQuestion = questions[currentQuestionIndex];\n      nextQuestion = questions[currentQuestionIndex + 1];\n      previousQuestion = questions[currentQuestionIndex - 1];\n      const answer = currentQuestion.answer;\n      this.setState({\n        currentQuestion,\n        nextQuestion,\n        previousQuestion,\n        answer,\n        previousRandomNumbers: []\n      }, () => {\n        this.showOptions();\n        this.handleDisableButton();\n      });\n    }\n  }\n  render() {\n    const {\n      currentQuestion,\n      currentQuestionIndex,\n      numberOfQuestions,\n      hints,\n      fiftyFifty,\n      time,\n      loading\n    } = this.state;\n    if (loading || this.state.questions.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 20\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Helmet, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Play Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          id: \"correct-audio\",\n          src: correctNotification\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          id: \"wrong-audio\",\n          src: wrongNotification\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          id: \"button-sound\",\n          src: buttonSound\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: this.state.type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lifeline-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: this.handleHints,\n              className: \"lifeline\",\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mdi mdi-lightbulb-on mdi-24px lifeline-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 84\n              }, this), hints]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: this.handleLifeline,\n              id: \"fiftyfifty\",\n              className: \"lifeline\",\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mdi mdi-set-center mdi-24px lifeline-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 103\n              }, this), fiftyFifty]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer-container\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"left\",\n              children: [currentQuestionIndex + 1, \" of \", numberOfQuestions]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"right\",\n              children: [time.minutes, \":\", time.seconds]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: currentQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            onClick: this.handleOptionClick,\n            className: \"option\",\n            children: currentQuestion.optionA\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            onClick: this.handleOptionClick,\n            className: \"option\",\n            children: currentQuestion.optionB\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            onClick: this.handleOptionClick,\n            className: \"option\",\n            children: currentQuestion.optionC\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            onClick: this.handleOptionClick,\n            className: \"option\",\n            children: currentQuestion.optionD\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"previous-button\",\n            onClick: this.handlePreviousButtonClick,\n            className: classnames('', {\n              'disable': this.state.previousButtonDisabled\n            }),\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"next-button\",\n            onClick: this.handleNextButtonClick,\n            className: classnames('', {\n              'disable': this.state.nextButtonDisabled\n            }),\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"quit-button\",\n            onClick: this.hadleQuitButtonClick,\n            children: \"Quit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }, this);\n  }\n}\nPlay.propTypes = {\n  quiz: PropTypes.object.isRequired,\n  getFreeQuestions: PropTypes.func.isRequired,\n  endFreeQuiz: PropTypes.func.isRequired,\n  navigate: PropTypes.func.isRequired\n};\nconst mapStateToProps = state => ({\n  quiz: state.quiz\n});\nexport default connect(mapStateToProps, {\n  endFreeQuiz,\n  getFreeQuestions\n})(Play);","map":{"version":3,"names":["classnames","M","PropTypes","React","Component","Fragment","Helmet","connect","Loader","endFreeQuiz","getFreeQuestions","isEmpty","buttonSound","correctNotification","wrongNotification","jsxDEV","_jsxDEV","Play","constructor","props","handleDisableButton","state","previousQuestion","undefined","currentQuestionIndex","setState","previousButtonDisabled","nextQuestion","numberOfQuestions","nextButtonDisabled","handleOptionClick","e","target","innerHTML","toLowerCase","answer","document","getElementById","play","setTimeout","correctAnswer","wrongAnswer","questionsArray","Object","keys","questions","map","i","length","handleNextButtonClick","playButtonSound","prevState","displayQuestion","currentQuestion","handlePreviousButtonClick","hadleQuitButtonClick","window","confirm","navigate","handleLifeline","id","fiftyFifty","usedFiftyFifty","handleFiftyFifty","options","querySelectorAll","randomNumbers","indexOfAnswer","forEach","option","index","count","randomNumber","Math","round","random","includes","push","newRandomNumber","style","visibility","handleHints","hints","Array","from","previousRandomNumbers","concat","showOptions","toast","html","classes","displayLength","score","correctAnswers","numberOfAnsweredQuestions","endGame","navigator","vibrate","wrongAnswers","playerStats","fiftyFiftyUsed","hintsUsed","startTimer","countDownTime","Date","now","interval","setInterval","distance","minutes","floor","seconds","clearInterval","time","type","loading","componentDidMount","componentWillUnmount","UNSAFE_componentWillReceiveProps","nextProps","quiz","render","fileName","_jsxFileName","lineNumber","columnNumber","children","src","className","onClick","question","optionA","optionB","optionC","optionD","propTypes","object","isRequired","func","mapStateToProps"],"sources":["D:/thesis/ChatbotforStudent/chatbot/src/components/free-quiz/Play.js"],"sourcesContent":["import classnames from 'classnames';\r\nimport M from 'materialize-css';\r\nimport PropTypes from 'prop-types';\r\nimport React, { Component, Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Loader from '../common/Loader';\r\n\r\nimport { endFreeQuiz, getFreeQuestions } from '../../actions/quizActions';\r\n\r\nimport isEmpty from '../../validation/is-empty';\r\n\r\nimport buttonSound from '../../assets/audio/button-sound.mp3';\r\nimport correctNotification from '../../assets/audio/correct-answer.mp3';\r\nimport wrongNotification from '../../assets/audio/wrong-answer.mp3';\r\n\r\nclass Play extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            type: '',\r\n            questions: [],\r\n            currentQuestion: {},\r\n            nextQuestion: {},\r\n            previousQuestion: {},\r\n            answer: '',\r\n            numberOfQuestions: 0,\r\n            numberOfAnsweredQuestions: 0,\r\n            currentQuestionIndex: 0,\r\n            score: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: 0,\r\n            hints: 10,\r\n            fiftyFifty: 2,\r\n            usedFiftyFifty: false,\r\n            loading: false,\r\n            previousButtonDisabled: true,\r\n            nextButtonDisabled: false,\r\n            previousRandomNumbers: [],\r\n            time: {}\r\n        };\r\n        this.interval = null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getFreeQuestions();\r\n        this.setState({\r\n            loading: true\r\n        });\r\n        this.startTimer();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        if (!isEmpty(nextProps.quiz)) {\r\n            this.setState({\r\n                questions: nextProps.quiz.questions,\r\n                type: nextProps.quiz.type,\r\n                numberOfQuestions: nextProps.quiz.numberOfQuestions,\r\n                loading: false\r\n            }, () => {\r\n                this.displayQuestion(this.state.questions);\r\n                this.handleDisableButton();\r\n            });\r\n        }\r\n    }\r\n\r\n    handleDisableButton = () => {\r\n        if (this.state.previousQuestion === undefined || this.state.currentQuestionIndex === 0) {\r\n            this.setState({\r\n                previousButtonDisabled: true\r\n            });\r\n        } else {\r\n            this.setState({\r\n                previousButtonDisabled: false\r\n            });\r\n        }\r\n\r\n        if (this.state.nextQuestion === undefined || this.state.currentQuestionIndex + 1 === this.state.numberOfQuestions) {\r\n            this.setState({\r\n                nextButtonDisabled: true\r\n            });\r\n        } else {\r\n            this.setState({\r\n                nextButtonDisabled: false\r\n            });\r\n        }\r\n    }\r\n\r\n    displayQuestion(questions = this.state.questions, currentQuestion, nextQuestion, previousQuestion) {\r\n        let { currentQuestionIndex } = this.state;\r\n        if (!isEmpty(this.state.questions)) {\r\n            questions = this.state.questions;\r\n            currentQuestion = questions[currentQuestionIndex];\r\n            nextQuestion = questions[currentQuestionIndex + 1];\r\n            previousQuestion = questions[currentQuestionIndex - 1];\r\n            const answer = currentQuestion.answer;\r\n            this.setState({\r\n                currentQuestion,\r\n                nextQuestion,\r\n                previousQuestion,\r\n                answer,\r\n                previousRandomNumbers: []\r\n            }, () => {\r\n                this.showOptions();\r\n                this.handleDisableButton();\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOptionClick = (e) => {\r\n        if (e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n            document.getElementById('correct-audio').play();\r\n            setTimeout(() => {\r\n                this.correctAnswer();\r\n            }, 500);\r\n        } else {\r\n            document.getElementById('wrong-audio').play();\r\n            setTimeout(() => {\r\n                this.wrongAnswer();\r\n            }, 500);\r\n        }\r\n\r\n        if (this.state.numberOfQuestions === 0) {\r\n            const questionsArray = Object.keys(this.state.questions).map(i => this.state.questions[i]);\r\n            this.setState({\r\n                numberOfQuestions: questionsArray.length\r\n            });\r\n        }\r\n    }\r\n\r\n    handleNextButtonClick = (e) => {\r\n        if (!this.state.nextButtonDisabled) {\r\n            this.playButtonSound();\r\n            if (this.state.nextQuestion !== undefined) {\r\n                this.setState((prevState) => ({\r\n                    currentQuestionIndex: prevState.currentQuestionIndex + 1\r\n                }), () => {\r\n                    this.displayQuestion(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    handlePreviousButtonClick = (e) => {\r\n        if (!this.state.previousButtonDisabled) {\r\n            this.playButtonSound();\r\n            if (this.state.previousQuestion !== undefined) {\r\n                this.setState((prevState) => ({\r\n                    currentQuestionIndex: prevState.currentQuestionIndex - 1\r\n                }), () => {\r\n                    this.displayQuestion(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    hadleQuitButtonClick = (e) => {\r\n        this.playButtonSound();\r\n        if (window.confirm('Are you sure you want to quit?')) {\r\n            this.props.navigate('/');\r\n        }\r\n    }\r\n\r\n    handleLifeline = (e) => {\r\n        switch (e.target.id) {\r\n            case 'fiftyfifty':\r\n                if (this.state.fiftyFifty > 0 && this.state.usedFiftyFifty === false) {\r\n                    this.handleFiftyFifty();\r\n                    this.setState((prevState) => ({\r\n                        fiftyFifty: prevState.fiftyFifty - 1\r\n                    }));\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleFiftyFifty = () => {\r\n        const options = document.querySelectorAll('.option');\r\n        const randomNumbers = [];\r\n        let indexOfAnswer;\r\n\r\n        options.forEach((option, index) => {\r\n            if (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n                indexOfAnswer = index;\r\n            }\r\n        });\r\n\r\n        let count = 0;\r\n        do {\r\n            const randomNumber = Math.round(Math.random() * 3);\r\n            if (randomNumber !== indexOfAnswer) {\r\n                if (randomNumbers.length < 2) {\r\n                    if (!randomNumbers.includes(randomNumber) && !randomNumbers.includes(indexOfAnswer)) {\r\n                        randomNumbers.push(randomNumber);\r\n                        count++;\r\n                    } else {\r\n                        while (true) {\r\n                            const newRandomNumber = Math.round(Math.random() * 3);\r\n                            if (!randomNumbers.includes(newRandomNumber) && newRandomNumber !== indexOfAnswer) {\r\n                                randomNumbers.push(newRandomNumber);\r\n                                count++;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } while (count < 2);\r\n        options.forEach((option, index) => {\r\n            if (randomNumbers.includes(index)) {\r\n                option.style.visibility = 'hidden';\r\n            }\r\n        });\r\n        this.setState({\r\n            usedFiftyFifty: true\r\n        });\r\n    }\r\n\r\n    handleHints = () => {\r\n        if (this.state.hints > 0) {\r\n            let options = Array.from(document.querySelectorAll('.option'));\r\n            let indexOfAnswer;\r\n\r\n\r\n            options.forEach((option, index) => {\r\n                if (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n                    indexOfAnswer = index;\r\n                }\r\n            });\r\n\r\n            while (true) {\r\n                const randomNumber = Math.round(Math.random() * 3);\r\n                if (randomNumber !== indexOfAnswer && !this.state.previousRandomNumbers.includes(randomNumber)) {\r\n                    options.forEach((option, index) => {\r\n                        if (index === randomNumber) {\r\n                            option.style.visibility = 'hidden';\r\n                            this.setState((prevState) => ({\r\n                                hints: prevState.hints - 1,\r\n                                previousRandomNumbers: prevState.previousRandomNumbers.concat(randomNumber)\r\n                            }));\r\n                        }\r\n                    });\r\n                    break;\r\n                }\r\n\r\n                if (this.state.previousRandomNumbers.length >= 3) break;\r\n            }\r\n        }\r\n    }\r\n\r\n    showOptions = () => {\r\n        const options = document.querySelectorAll('.option');\r\n        options.forEach(option => {\r\n            option.style.visibility = 'visible';\r\n        });\r\n        this.setState({\r\n            usedFiftyFifty: false\r\n        });\r\n    };\r\n\r\n    correctAnswer = () => {\r\n        M.toast({\r\n            html: 'Correct Answer!',\r\n            classes: 'toast-valid',\r\n            displayLength: 1500\r\n        });\r\n        this.setState((prevState) => ({\r\n            score: prevState.score + 1,\r\n            correctAnswers: prevState.correctAnswers + 1,\r\n            currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n            numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1,\r\n        }), () => {\r\n            if (this.state.nextQuestion === undefined) {\r\n                setTimeout(() => {\r\n                    this.endGame();\r\n                }, 1000);\r\n            } else {\r\n                this.displayQuestion(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            }\r\n        });\r\n    }\r\n\r\n    wrongAnswer = () => {\r\n        navigator.vibrate(1000);\r\n        M.toast({\r\n            html: 'Wrong Answer!',\r\n            classes: 'toast-invalid',\r\n            displayLength: 1500\r\n        });\r\n        this.setState((prevState) => ({\r\n            wrongAnswers: prevState.wrongAnswers + 1,\r\n            currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n            numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\r\n        }), () => {\r\n            if (this.state.nextQuestion === undefined) {\r\n                setTimeout(() => {\r\n                    this.endGame();\r\n                }, 1000);\r\n            } else {\r\n                this.displayQuestion(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            }\r\n        });\r\n    }\r\n\r\n    endGame = () => {\r\n        const { state } = this;\r\n        const playerStats = {\r\n            score: state.score,\r\n            numberOfQuestions: state.numberOfQuestions,\r\n            numberOfAnsweredQuestions: state.numberOfAnsweredQuestions,\r\n            correctAnswers: state.correctAnswers,\r\n            wrongAnswers: state.wrongAnswers,\r\n            fiftyFiftyUsed: 2 - state.fiftyFifty,\r\n            hintsUsed: 10 - state.hints\r\n        };\r\n        this.props.endFreeQuiz(playerStats);\r\n        setTimeout(() => {\r\n            this.props.navigate('/play/quizSummary');\r\n        }, 1000);\r\n    }\r\n\r\n    startTimer = () => {\r\n        const countDownTime = Date.now() + 1800000;\r\n        this.interval = setInterval(() => {\r\n            const now = new Date();\r\n            const distance = countDownTime - now;\r\n\r\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n            if (distance < 0) {\r\n                clearInterval(this.interval);\r\n                this.setState({\r\n                    time: {\r\n                        minutes: 0,\r\n                        seconds: 0\r\n                    }\r\n                }, () => {\r\n                    this.endGame();\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    time: {\r\n                        minutes,\r\n                        seconds\r\n                    }\r\n                });\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    playButtonSound = () => {\r\n        document.getElementById('button-sound').play();\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            currentQuestion,\r\n            currentQuestionIndex,\r\n            numberOfQuestions,\r\n            hints,\r\n            fiftyFifty,\r\n            time,\r\n            loading\r\n        } = this.state;\r\n\r\n        if (loading || this.state.questions.length === 0) {\r\n            return <Loader />;\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <Helmet><title>Play Quiz</title></Helmet>\r\n                <Fragment>\r\n                    <audio id=\"correct-audio\" src={correctNotification}></audio>\r\n                    <audio id=\"wrong-audio\" src={wrongNotification}></audio>\r\n                    <audio id=\"button-sound\" src={buttonSound}></audio>\r\n                </Fragment>\r\n                <div className=\"questions\">\r\n                    <h2>{this.state.type}</h2>\r\n                    <div className=\"lifeline-container\">\r\n                        <p>\r\n                            <span onClick={this.handleHints} className=\"lifeline\"> <span className=\"mdi mdi-lightbulb-on mdi-24px lifeline-icon\"></span>{hints}</span>\r\n                        </p>\r\n                        <p>\r\n                            <span onClick={this.handleLifeline} id=\"fiftyfifty\" className=\"lifeline\"> <span className=\"mdi mdi-set-center mdi-24px lifeline-icon\"></span>{fiftyFifty}</span>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"timer-container\">\r\n                        <p>\r\n                            <span className=\"left\">{currentQuestionIndex + 1} of {numberOfQuestions}</span>\r\n                            <span className=\"right\">{time.minutes}:{time.seconds}</span>\r\n                        </p>\r\n                    </div>\r\n                    <h5>{currentQuestion.question}</h5>\r\n                    <div className=\"options-container\">\r\n                        <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionA}</p>\r\n                        <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionB}</p>\r\n                    </div>\r\n                    <div className=\"options-container\">\r\n                        <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionC}</p>\r\n                        <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionD}</p>\r\n                    </div>\r\n\r\n                    <div className=\"button-container\">\r\n                        <button id=\"previous-button\" onClick={this.handlePreviousButtonClick} className={classnames('', { 'disable': this.state.previousButtonDisabled })}>Previous</button>\r\n                        <button id=\"next-button\" onClick={this.handleNextButtonClick} className={classnames('', { 'disable': this.state.nextButtonDisabled })}>Next</button>\r\n                        <button id=\"quit-button\" onClick={this.hadleQuitButtonClick}>Quit</button>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nPlay.propTypes = {\r\n    quiz: PropTypes.object.isRequired,\r\n    getFreeQuestions: PropTypes.func.isRequired,\r\n    endFreeQuiz: PropTypes.func.isRequired,\r\n    navigate: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    quiz: state.quiz\r\n});\r\n\r\nexport default connect(mapStateToProps, { endFreeQuiz, getFreeQuestions })(Play);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}